import asyncio
import logging
import os
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Router, types, F
from aiogram import Router
from aiogram import types
from database import init_db, add_user, add_review, add_purchase, add_referral, get_referrals_count  
from aiogram import Dispatcher


API_TOKEN = "8114305996:AAEH1AMwbHiCt9Rv12mSo3vsAZUVA81KAtY"

router = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
dp.include_router(router) 

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
init_db()

launch_blum_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ Launch Blum", url="https://blum.example.com")]
    ]
)

# –°–ø–∏—Å–æ–∫ –∫–æ—Ç–æ–≤ —Å —Ñ–æ—Ç–æ
cats = {
    "KAR": {"name": "–ö–∞—Ä—Ç–µ–∑–∏–∞–Ω—Å–∫–∏–π", "price": "1000‚ÇΩ", "photo": "image/6.jpg"},
    "SIA": {"name": "–°–∏–∞–º—Å–∫–∏–π", "price": "1600‚ÇΩ", "photo": "image/2.jpg"},
    "BEN": {"name": "–ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π", "price": "2700‚ÇΩ", "photo": "image/3.jpg"},
    "SIB": {"name": "–°–∏–±–∏—Ä—Å–∫–∞—è –∫–æ—à–∫–∞", "price": "2800‚ÇΩ", "photo": "image/5.jpg"},
    "MAN": {"name": "–ú–∞–Ω—á–∫–∏–Ω", "price": "3200‚ÇΩ", "photo": "image/4.jpg"},
    "SCO": {"name": "–®–æ—Ç–ª–∞–Ω–¥—Å–∫–∏–π", "price": "5000‚ÇΩ", "photo": "image/1.jpg"}
}
cat_facts = [
    "üò∫ –ö–æ—à–∫–∏ —Å–ø—è—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º 12-16 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.",
    "üêæ –£ –∫–æ—à–µ–∫ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏—Ö –ª–∞–ø–∞—Ö –ø–æ 5 –ø–∞–ª—å—Ü–µ–≤, –∞ –Ω–∞ –∑–∞–¥–Ω–∏—Ö ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ 4.",
    "üß† –ú–æ–∑–≥ –∫–æ—à–∫–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –Ω–∞ 90% –ø–æ—Ö–æ–∂ –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π.",
    "üëÇ –£ –∫–æ—à–µ–∫ –æ–∫–æ–ª–æ 32 –º—ã—à—Ü –≤ –∫–∞–∂–¥–æ–º —É—Ö–µ, —á—Ç–æ–±—ã –ª—É—á—à–µ —Å–ª—ã—à–∞—Ç—å.",
    "üíó –ö–æ—à–∫–∏ –º—É—Ä–ª—ã–∫–∞—é—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è, –Ω–æ –∏ —á—Ç–æ–±—ã —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è.",
    "üéØ –ö–æ—à–∫–∞ –º–æ–∂–µ—Ç –ø—Ä—ã–≥–Ω—É—Ç—å –Ω–∞ –≤—ã—Å–æ—Ç—É –¥–æ 5 —Ä–∞–∑ –ø—Ä–µ–≤—ã—à–∞—é—â—É—é –µ—ë —Ä–æ—Å—Ç!",
    "üåô –ö–æ—à–∫–∏ –≤–∏–¥—è—Ç –≤ —Ç–µ–º–Ω–æ—Ç–µ –≤ 6 —Ä–∞–∑ –ª—É—á—à–µ –ª—é–¥–µ–π."
]

from database import add_user
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("start"))
async def start(message: types.Message):
    user = message.from_user
    add_user(user.id, user.username, f"{user.first_name} {user.last_name or ''}")

      # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    if len(message.text.split()) > 1 and message.text.split()[1].startswith('ref_'):
        referrer_id = int(message.text.split('_')[1])
        if referrer_id != user.id:
            add_referral(user.id, referrer_id)
            await bot.send_message(referrer_id, f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! @{user.username}")
    
    await send_main_menu(message)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class PurchaseState(StatesGroup):
    waiting_for_city = State()
    waiting_for_address = State()
    waiting_for_promo = State()

class ReviewState(StatesGroup):
    waiting_for_review = State()

class AdminBroadcast(StatesGroup):
    waiting_for_broadcast = State()

class CartState(StatesGroup):
    viewing = State()
    checking_out = State()

class PreorderState(StatesGroup):
    waiting_for_contacts = State()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def send_main_menu(message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –∫–æ—Ç–∞ üê±", callback_data="buy_menu")],
        [InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ üõí", callback_data="view_cart")],
        [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†", callback_data="support")],
        [InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã ‚≠ê", callback_data="reviews_0")],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data="settings")],
        [InlineKeyboardButton(text="–§–∞–∫—Ç –æ –∫–æ—Ç–∞—Ö üìö", callback_data="cat_fact")],
        [InlineKeyboardButton(text="–û –º–∞–≥–∞–∑–∏–Ω–µ üè™", callback_data="about")],
        [InlineKeyboardButton(text="–ò–≥—Ä–∞—Ç—å üéÆ", callback_data="play_game")],
        [InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—ã üë•", callback_data="referral_info")],
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∫–æ—Ç–æ–≤
@dp.callback_query(lambda c: c.data == "buy_menu")
async def buy_menu(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=cats["KAR"]["name"], callback_data="KAR"),
            InlineKeyboardButton(text=cats["SIA"]["name"], callback_data="SIA")
        ],
        [
            InlineKeyboardButton(text=cats["BEN"]["name"], callback_data="BEN"),
            InlineKeyboardButton(text=cats["SIB"]["name"], callback_data="SIB")
        ],
        [
            InlineKeyboardButton(text=cats["MAN"]["name"], callback_data="MAN"),
            InlineKeyboardButton(text=cats["SCO"]["name"], callback_data="SCO")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.delete()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ—Ç–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ
@dp.callback_query(lambda c: c.data in cats)
async def show_cat_info(callback: types.CallbackQuery):
    cat = cats[callback.data]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f"buy_{callback.data}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_menu")]  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
    ])

    photo_path = cat["photo"]
    photo = FSInputFile(photo_path)

    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        photo=photo,
        caption=f"{cat['name']} —Å—Ç–æ–∏—Ç {cat['price']}.\n–•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?",
        reply_markup=keyboard
    )
    await callback.answer()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
class PurchaseState(StatesGroup):
    waiting_for_city = State()
    waiting_for_address = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏
@router.callback_query(lambda c: c.data.startswith("buy_"))
async def buy_cat(callback: types.CallbackQuery, state: FSMContext):
    cat_key = callback.data.split("_")[1]
    cat = cats.get(cat_key)

    if cat:
        await state.update_data(selected_cat=cat)

        await callback.message.delete()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:")
        await state.set_state(PurchaseState.waiting_for_city)

    await callback.answer()

# –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞
@router.message(PurchaseState.waiting_for_city)
async def enter_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(PurchaseState.waiting_for_address)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")

from database import add_purchase
# –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
@router.message(PurchaseState.waiting_for_address)
async def enter_address(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cat = data["selected_cat"]
    user = message.from_user
    city = data.get("city")
    address = message.text

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É –≤ –ë–î
    add_purchase(
        user_id=user.id,
        cat_name=cat['name'],
        price=cat['price'],
        city=city,
        address=address
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –∞–¥—Ä–µ—Å–æ–º
    await message.answer(
        f"üéâ –í—ã –∫—É–ø–∏–ª–∏ {cat['name']} –∑–∞ {cat['price']}! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üöö\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–±—É–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –ø–æ –∞–¥—Ä–µ—Å—É:\n"
        f"üèô –ì–æ—Ä–æ–¥: {city}\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}",
        reply_markup=keyboard
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥", –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.delete()
    await send_main_menu(callback.message)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
@dp.callback_query(lambda c: c.data == "support")
async def support(callback: types.CallbackQuery):
    support_username = "@Lexa_Arbuz" 
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url=f"https://t.me/{support_username}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

    await callback.message.edit_text("–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:", reply_markup=keyboard)
    await callback.answer()

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ—Ç–∑—ã–≤–∞
class ReviewState(StatesGroup):
    waiting_for_review = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∑—ã–≤—ã"
@dp.callback_query(lambda c: c.data.startswith("reviews"))
async def reviews(callback: types.CallbackQuery):
    index = int(callback.data.split("_")[1]) if "_" in callback.data else 0  # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥", "–í–ø–µ—Ä–µ–¥" –∏ "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[ 
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"reviews_{index-1}") if index > 0 else InlineKeyboardButton(text=" ", callback_data="none"),
            InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"reviews_{index+1}") if index < len(comments) - 1 else InlineKeyboardButton(text=" ", callback_data="none")
        ],
        [InlineKeyboardButton(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

    await callback.message.edit_text(comments[index], reply_markup=keyboard)
    await callback.answer()

class ReviewState(StatesGroup):
    waiting_for_review = State()

# –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
comments = [
    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1: –û—Ç–ª–∏—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω, –∫–æ—Ç–∏–∫–∏ –ø—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä! üòª",
    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2: –ë—ã—Å—Ç—Ä–æ –¥–æ—Å—Ç–∞–≤–∏–ª–∏, –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! üêæ",
    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 3: –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—É—à–∏—Å—Ç–∏–∫–∞, –æ–Ω —á—É–¥–æ! ‚ù§Ô∏è",
    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 4: –¶–µ–Ω—ã –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ, —Å–µ—Ä–≤–∏—Å –Ω–∞ –≤—ã—Å–æ—Ç–µ. üí∞",
    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 5: –î–æ–ª–≥–æ –≤—ã–±–∏—Ä–∞–ª, –Ω–æ –¥–æ–≤–æ–ª–µ–Ω –ø–æ–∫—É–ø–∫–æ–π! üõç",
    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 6: –í—Å–µ–º —Å–æ–≤–µ—Ç—É—é —ç—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω! ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤"
@dp.callback_query(lambda c: c.data == "leave_review")
async def leave_review(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    await state.set_state(ReviewState.waiting_for_review)  # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ FSMContext

from database import add_review
@dp.message(ReviewState.waiting_for_review)
async def process_review(message: types.Message, state: FSMContext):
    user_review = message.text
    user = message.from_user
    add_review(user.id, user_review)
    comments.append(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {len(comments) + 1}: {user_review}")  

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[ 
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –æ—Ç–∑—ã–≤ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
    await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥! üéâ", reply_markup=keyboard)
    await state.clear()  # ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    # –ó–¥–µ—Å—å –≤—ã –¥–æ–ª–∂–Ω—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç:")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    main_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="reviews_0")],
        [InlineKeyboardButton(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")]
    ])
    
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –º–∞–≥–∞–∑–∏–Ω–µ"
@dp.callback_query(lambda c: c.data == "about")
async def about(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å", callback_data="creator")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

    about_text = (
        "üè™ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –∫–æ—Ç–∏–∫–æ–≤!* üê±\n\n"
        "üîπ –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∞–º—ã—Ö –º–∏–ª—ã—Ö –∏ –∑–¥–æ—Ä–æ–≤—ã—Ö –∫–æ—Ç–æ–≤.\n"
        "üîπ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø–∏—Ç–æ–º—Ü–∞.\n"
        "üîπ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É! üåç\n"
        "üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ *'–°–æ–∑–¥–∞—Ç–µ–ª—å'*, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å—Ç–æ–∏—Ç –∑–∞ —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º! üë§"
    )

    await callback.message.edit_text(about_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç–µ–ª—å"
@dp.callback_query(lambda c: c.data == "creator")
async def creator(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞–≥–∞–∑–∏–Ω–µ
    if callback.message.reply_to_message:
        await callback.message.reply_to_message.delete()

    # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    photo_path = "image/creator.jpg"

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="about")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    await bot.send_photo(callback.message.chat.id, types.FSInputFile(photo_path), caption="üë§ *–°–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞!*", parse_mode="Markdown")
    await callback.message.answer("‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é '–û –º–∞–≥–∞–∑–∏–Ω–µ'", reply_markup=keyboard)
    await callback.answer()

    await callback.message.edit_text(photo_path, reply_markup=keyboard, parse_mode="Markdown")
    await callback.message.delete()
    await callback.answer()

# —Ñ–∞–∫—Ç—ã –æ –∫–æ—Ç–∞—Ö
@dp.callback_query(lambda c: c.data == "cat_fact")
async def send_cat_fact(callback: types.CallbackQuery):
    fact = random.choice(cat_facts)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –ù–æ–≤—ã–π —Ñ–∞–∫—Ç", callback_data="cat_fact")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    await callback.message.edit_text(f"–í–æ—Ç —Ñ–∞–∫—Ç –æ –∫–æ—Ç–∞—Ö:\n\n{fact}", reply_markup=keyboard)
    await callback.answer()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞
class SettingsState(StatesGroup):
    waiting_for_language = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
@dp.callback_query(lambda c: c.data == "settings")
async def settings_menu(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="language_ru")],
        [InlineKeyboardButton(text="English üá¨üáß", callback_data="language_en")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@dp.callback_query(lambda c: c.data == "language_ru")
async def set_language_ru(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(language="ru")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –∫–æ—Ç–∞ üê±", callback_data="buy_menu")],
            [InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ üõí", callback_data="view_cart")],
            [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†", callback_data="support")],
            [InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã ‚≠ê", callback_data="reviews_0")],
            [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data="settings")],
            [InlineKeyboardButton(text="–§–∞–∫—Ç –æ –∫–æ—Ç–∞—Ö üìö", callback_data="cat_fact")],
            [InlineKeyboardButton(text="–û –º–∞–≥–∞–∑–∏–Ω–µ üè™", callback_data="about")],
            [InlineKeyboardButton(text="–ò–≥—Ä–∞—Ç—å üéÆ", callback_data="play_game")],
            [InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—ã üë•", callback_data="referral_info")]
    ])
    
    await callback.message.edit_text("–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π üá∑üá∫", reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@dp.callback_query(lambda c: c.data == "language_en")
async def set_language_en(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(language="en")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="Buy a cat üê±", callback_data="buy_menu")],
            [InlineKeyboardButton(text="Basket üõí", callback_data="view_cart")],
            [InlineKeyboardButton(text="Support üõ†", callback_data="support")],
            [InlineKeyboardButton(text="Reviews ‚≠ê", callback_data="reviews_0")],
            [InlineKeyboardButton(text="Settings ‚öôÔ∏è", callback_data="settings")],
            [InlineKeyboardButton(text="Cat Fact üìö", callback_data="cat_fact")],
            [InlineKeyboardButton(text="About the store üè™", callback_data="about")],
            [InlineKeyboardButton(text="Play üéÆ", callback_data="play_game")],
            [InlineKeyboardButton(text="Refs üë•", callback_data="referral_info")] 
    ])
    
    await callback.message.edit_text("Language changed to English üá¨üáß", reply_markup=keyboard)
    await callback.answer()

user_languages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id: language)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
user_languages = {}  # –°–ª–æ–≤–∞—Ä—å (user_id: language)

async def send_main_menu(message: types.Message):
    user_id = message.from_user.id
    language = user_languages.get(user_id, "ru")

    if language == "ru":
        text = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        buttons = [
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –∫–æ—Ç–∞ üê±", callback_data="buy_menu")],
            [InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ üõí", callback_data="view_cart")],
            [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†", callback_data="support")],
            [InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã ‚≠ê", callback_data="reviews_0")],
            [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data="settings")],
            [InlineKeyboardButton(text="–§–∞–∫—Ç –æ –∫–æ—Ç–∞—Ö üìö", callback_data="cat_fact")],
            [InlineKeyboardButton(text="–û –º–∞–≥–∞–∑–∏–Ω–µ üè™", callback_data="about")],
            [InlineKeyboardButton(text="–ò–≥—Ä–∞—Ç—å üéÆ", callback_data="play_game")],
            [InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—ã üë•", callback_data="referral_info")]
        ]
    else:
        text = "Hello! Choose an action:"
        buttons = [
            [InlineKeyboardButton(text="Buy a cat üê±", callback_data="buy_menu")],
            [InlineKeyboardButton(text="Basket üõí", callback_data="view_cart")],
            [InlineKeyboardButton(text="Support üõ†", callback_data="support")],
            [InlineKeyboardButton(text="Reviews ‚≠ê", callback_data="reviews_0")],
            [InlineKeyboardButton(text="Settings ‚öôÔ∏è", callback_data="settings")],
            [InlineKeyboardButton(text="Cat Fact üìö", callback_data="cat_fact")],
            [InlineKeyboardButton(text="About the store üè™", callback_data="about")],
            [InlineKeyboardButton(text="Play üéÆ", callback_data="play_game")],
            [InlineKeyboardButton(text="Refs üë•", callback_data="referral_info")] 
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(text, reply_markup=keyboard)

# –ò–≥—Ä—É–ª—å–∫–∞
@dp.callback_query(lambda c: c.data == "play_game")
async def start_game(callback: types.CallbackQuery):
    cat_id = random.choice(list(cats.keys()))
    photo_path = cats[cat_id]["photo"]
    photo = FSInputFile(photo_path)
    options_ids = [cat_id]
    options_ids += random.sample([cid for cid in cats if cid != cat_id], 2)
    random.shuffle(options_ids)
    buttons = []
    for cid in options_ids:
        buttons.append(InlineKeyboardButton(text=cats[cid]["name"], callback_data=f"guess_{cid}_{cat_id}"))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [buttons[0], buttons[1]],
        [buttons[2]],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await callback.message.delete()
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        photo=photo,
        caption="–£–≥–∞–¥–∞–π –ø–æ—Ä–æ–¥—É —ç—Ç–æ–≥–æ –∫–æ—Ç–∞!",
        reply_markup=keyboard
    )
    await callback.answer()
    await callback.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã
@dp.callback_query(lambda c: c.data.startswith("guess_"))
async def handle_guess(callback: types.CallbackQuery):
    data_parts = callback.data.split('_')
    guessed_id = data_parts[1]
    correct_id = data_parts[2]

    if guessed_id == correct_id:
        await callback.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–Ω–∞—Ç–æ–∫ –∫–æ—Ç–æ–≤!", show_alert=True)
    else:
        await callback.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –≠—Ç–æ {cats[correct_id]['name']}", show_alert=True)

    await asyncio.sleep(1)
    await callback.message.delete()
    
    await callback.message.answer(
        "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )
    await callback.answer()

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
@dp.callback_query(lambda c: c.data == "referral_info")
async def referral_info(callback: types.CallbackQuery):
    ref_count = get_referrals_count(callback.from_user.id)
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start=ref_{callback.from_user.id}"

    msg = await callback.message.answer(
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n"
        f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {ref_count}\n"
        f"‚Ä¢ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {ref_link}\n\n"
        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å—ã!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )
    await callback.message.delete()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())
